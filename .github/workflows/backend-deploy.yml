name: Backend Deploy

# Backend 폴더가 변경될 때 또는 수동 실행
on:
  push:
    branches: [ develop ]
    paths:
      - 'Backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 코드 가져오기
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Java 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # .env 파일 생성
    - name: Create nimn.env file
      working-directory: ./Backend
      run: |
        cat > nimn.env << EOF
        SPRING_PROFILES_ACTIVE=prod
        AWS_HOST=${{ secrets.AWS_HOST }}
        DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        OPENAI_CHAT_MODEL=${{ secrets.OPENAI_CHAT_MODEL }}
        OPENAI_CHAT_URL=${{ secrets.OPENAI_CHAT_URL }}
        OPENAI_IMAGE_MODEL=${{ secrets.OPENAI_IMAGE_MODEL }}
        OPENAI_IMAGE_URL=${{ secrets.OPENAI_IMAGE_URL }}
        import_apiKey=${{ secrets.import_apiKey }}
        import_secretKey=${{ secrets.import_secretKey }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        GOOGLE_EMAIL=${{ secrets.GOOGLE_EMAIL }}
        GOOGLE_APP_PASSWORD=${{ secrets.GOOGLE_APP_PASSWORD }}
        EOF
    
    # 빌드 권한 설정
    - name: Grant execute permission for gradlew
      working-directory: ./Backend
      run: chmod +x gradlew
    
    # 애플리케이션 빌드
    - name: Build application
      working-directory: ./Backend
      run: ./gradlew build -x test
    
    # SSH 키 설정 및 서버 배포
    - name: Deploy to server
      run: |
        # SSH 호스트 키 검증 비활성화
        mkdir -p ~/.ssh
        echo "StrictHostKeyChecking no" >> ~/.ssh/config
        
        # AWS SSH 키 설정
        echo "${{ secrets.AWS_SSH_KEY }}" > deploy_key.pem
        chmod 600 deploy_key.pem
        
        # 애플리케이션 배포 스크립트 생성
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        echo "=== Starting Deployment ==="

        cd ~/nimn

        pkill -f "java -jar" || true

        sleep 3

        if [ -f nimn.env ]; then
          echo "Environment file found"
        else
          echo "Warning: nimn.env not found"
        fi
        
        echo "Available JAR files:"
        ls -la *.jar
        
        echo "Starting new application..."
        nohup env $(cat nimn.env | xargs) java -jar *.jar > app.log 2>&1 &
        sleep 5
        
        if pgrep -f "java -jar" > /dev/null; then
          echo "Application started successfully"
          echo "PID: $(pgrep -f "java -jar")"
          echo "=== Deployment Completed Successfully ==="
        else
          echo "Failed to start application"
          echo "Application log (last 20 lines):"
          tail -20 app.log
          exit 1
        fi
        EOF
        
        chmod +x deploy.sh
        
        # JAR 파일과 환경 변수 파일 전송
        scp -i deploy_key.pem Backend/build/libs/*.jar ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/nimn/
        scp -i deploy_key.pem Backend/nimn.env ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/nimn/
        scp -i deploy_key.pem deploy.sh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/nimn/
        
        # 배포 스크립트 실행
        ssh -i deploy_key.pem ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} 'cd ~/nimn && ./deploy.sh'
        
        # 키 정리
        rm -f deploy_key.pem deploy.sh
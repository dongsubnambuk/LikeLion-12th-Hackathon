
name: Backend Deploy

# Backend 폴더가 변경될 때만 실행
on:
  push:
    branches: [ develop ]
    paths:
      - 'Backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 코드 가져오기
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Java 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # .env 파일 생성
    - name: Create nimn.env file
      working-directory: ./Backend
      run: |
        cat > nimn.env << EOF
        SPRING_PROFILES_ACTIVE=prod
        AWS_HOST=${{ secrets.AWS_HOST }}
        DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        OPENAI_CHAT_MODEL=${{ secrets.OPENAI_CHAT_MODEL }}
        OPENAI_CHAT_URL=${{ secrets.OPENAI_CHAT_URL }}
        OPENAI_IMAGE_MODEL=${{ secrets.OPENAI_IMAGE_MODEL }}
        OPENAI_IMAGE_URL=${{ secrets.OPENAI_IMAGE_URL }}
        import_apiKey=${{ secrets.import_apiKey }}
        import_secretKey=${{ secrets.import_secretKey }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        GOOGLE_EMAIL=${{ secrets.GOOGLE_EMAIL }}
        GOOGLE_APP_PASSWORD=${{ secrets.GOOGLE_APP_PASSWORD }}
        EOF
    
    # 빌드 권한 설정
    - name: Grant execute permission for gradlew
      working-directory: ./Backend
      run: chmod +x gradlew
    
    # 애플리케이션 빌드
    - name: Build application
      working-directory: ./Backend
      run: ./gradlew build -x test
    
    # AWS 서버에 JAR 파일 전송 (plain JAR 제외)
    - name: Copy JAR to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_KEY }}
        port: 22
        source: "Backend/build/libs/*[!plain].jar"
        target: "~/nimn/"
        strip_components: 3
    
    # AWS 서버에 .env 파일 전송
    - name: Copy env file to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_KEY }}
        port: 22
        source: "Backend/nimn.env"
        target: "~/nimn/"
        strip_components: 1
    
    # 기존 애플리케이션 중지
    - name: Stop existing application
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 60s
        script: |
          echo "Stopping existing application..."
          pkill -f 'nimn.*\.jar' || echo "No existing process found"
          sleep 3
          echo "Stop process completed"
    
    # 새 애플리케이션 시작
    - name: Start new application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 60s
        script: |
          echo "Starting new application..."
          cd ~/nimn
          
          # JAR 파일 확인
          ls -la *.jar
          
          # 실행 가능한 JAR 파일 찾기
          JAR_FILE=$(ls *.jar | grep -v plain | head -1)
          echo "Using JAR file: $JAR_FILE"
          
          # 환경변수와 함께 백그라운드로 새 애플리케이션 시작
          nohup env $(cat nimn.env | xargs) java -jar "$JAR_FILE" > app.log 2>&1 &
          
          # 프로세스 시작 확인
          sleep 5
          
          # 실행 중인 프로세스 확인
          if pgrep -f 'nimn.*\.jar' > /dev/null; then
            echo "Application started successfully"
            echo "PID: $(pgrep -f 'nimn.*\.jar')"
          else
            echo "Failed to start application"
            echo "Last 20 lines of log:"
            tail -20 app.log
            exit 1
          fi
    
    # 애플리케이션 상태 확인
    - name: Check application health
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 30s
        script: |
          echo "Checking application health..."
          cd ~/nimn
          
          sleep 10
          
          echo "Application log (last 30 lines):"
          tail -30 app.log
          
          echo "Running processes:"
          ps aux | grep java | grep -v grep
          
          echo "Deployment completed successfully!"
